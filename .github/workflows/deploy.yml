name: 컨테이너 기반 배포하기

on:
  push:
    branches:
      - master

jobs:
  Container-based-deployments-Job:
    runs-on: ubuntu-latest

    steps:
      - name: simple-action-test
        run: echo "This is the first cicd step"

      - name: Github repository 소스 가져오기
        uses: actions/checkout@v4

      - name: JDK 17 설치하기
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: applcation.yml 추가
        run:
          echo ${{secrets.APPLICATION_YML}} |base64 --decode >> ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: AWS ECR 접근하기 위한 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: AWS ECR 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2


      - name: Docker 이미지 생성하기, tag 붙이기
        run: | 
          docker build -t web-server .
          docker tag web-server ${{ steps.login-ecr.outputs.registry }}/web-server:latest

      - name: Docker 이미지 ECR에 Push 하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/web-server:latest

      - name: SSH로 EC2에 접속하기(ECR로부터 이미지 pull한 다음 컨테이너 실행)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script_stop: true
          script: |
            docker stop web-server || true 
            docker rm web-server || true
            docker pull ${{ steps.login-ecr.outputs.registry }}/web-server:latest
            docker run -d --name web-server -p 8080:8080 ${{ steps.login-ecr.outputs.registry }}/web-server:latest